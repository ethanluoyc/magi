"""SAC builder"""
from typing import Callable, Iterator, List, Optional

from acme import adders
from acme import core
from acme import datasets
from acme import specs
from acme.adders import reverb as adders_reverb
from acme.agents.jax import actor_core
from acme.agents.jax import actors
from acme.agents.jax import builders
from acme.jax import networks as networks_lib
from acme.jax import variable_utils
from acme.jax.types import Networks  # pylint: disable=g-multiple-import
from acme.jax.types import PolicyNetwork
from acme.utils import counting
from acme.utils import loggers
import optax
import reverb
from reverb import rate_limiters

from magi.agents.sac import config as sac_config
from magi.agents.sac import learning as learning_lib


class SACBuilder(builders.ActorLearnerBuilder):
  """Soft Actor-Critic agent specification"""

  def __init__(
      self,
      config: sac_config.SACConfig,
      logger_fn: Callable[[], loggers.Logger],
  ):
    self._config = config
    self._logger_fn = logger_fn

  def make_replay_tables(
      self,
      environment_spec: specs.EnvironmentSpec,
  ) -> List[reverb.Table]:
    """Create tables to insert data into."""
    replay_table = reverb.Table(
        name=self._config.replay_table_name,
        # TODO(yl): support prioritized sampling in SAC
        sampler=reverb.selectors.Uniform(),
        remover=reverb.selectors.Fifo(),
        max_size=self._config.max_replay_size,
        rate_limiter=rate_limiters.MinSize(self._config.min_replay_size),
        signature=adders_reverb.NStepTransitionAdder.signature(
            environment_spec=environment_spec),
    )
    return [replay_table]

  def make_dataset_iterator(
      self,
      replay_client: reverb.Client,
  ) -> Iterator[reverb.ReplaySample]:
    """Create a dataset iterator to use for learning/updating the agent."""
    dataset = datasets.make_reverb_dataset(
        table=self._config.replay_table_name,
        server_address=replay_client.server_address,
        batch_size=self._config.batch_size,
        prefetch_size=self._config.prefetch_size,
        transition_adder=True,
    )
    return dataset.as_numpy_iterator()

  def make_adder(self, replay_client: reverb.Client) -> Optional[adders.Adder]:
    """Create an adder which records data generated by the actor/environment.

        Args:
          replay_client: Reverb Client which points to the replay server.
        """
    # TODO(yl): support multi step transitions
    return adders_reverb.NStepTransitionAdder(
        client=replay_client, n_step=1, discount=self._config.discount)

  def make_actor(
      self,
      random_key: networks_lib.PRNGKey,
      policy_network: PolicyNetwork,
      adder: Optional[adders.Adder] = None,
      variable_source: Optional[core.VariableSource] = None,
  ) -> core.Actor:
    """Create an actor instance.

        Args:
          random_key: A key for random number generation.
          policy_network: Instance of a policy network; this should be a callable
            which takes as input observations and returns actions.
          adder: How data is recorded (e.g. added to replay).
          variable_source: A source providing the necessary actor parameters.
        """
    assert variable_source is not None
    variable_client = variable_utils.VariableClient(variable_source, 'policy')
    variable_client.update_and_wait()

    return actors.GenericActor(
        actor_core.batched_feed_forward_to_actor_core(policy_network),
        random_key,
        variable_client=variable_client,
        adder=adder,
    )

  def make_learner(
      self,
      random_key: networks_lib.PRNGKey,
      networks: Networks,
      dataset: Iterator[reverb.ReplaySample],
      replay_client: Optional[reverb.Client] = None,
      counter: Optional[counting.Counter] = None,
  ) -> core.Learner:
    """Creates an instance of the learner.

        Args:
          random_key: A key for random number generation.
          networks: struct describing the networks needed by the learner; this can
            be specific to the learner in question.
          dataset: iterator over samples from replay.
          replay_client: client which allows communication with replay, e.g. in
            order to update priorities.
          counter: a Counter which allows for recording of counts (learner steps,
            actor steps, etc.) distributed throughout the agent.
          checkpoint: bool controlling whether the learner checkpoints itself.
        """
    del replay_client
    critic_opt = optax.adam(self._config.critic_learning_rate)
    actor_opt = optax.adam(self._config.actor_learning_rate)
    alpha_opt = optax.adam(self._config.temperature_learning_rate)

    return learning_lib.SACLearner(
        networks['policy'],
        networks['critic'],
        random_key=random_key,
        dataset=dataset,
        policy_optimizer=actor_opt,
        critic_optimizer=critic_opt,
        alpha_optimizer=alpha_opt,
        target_entropy=self._config.target_entropy,
        discount=self._config.discount,
        tau=self._config.critic_soft_update_rate,
        init_alpha=self._config.init_temperature,
        logger=self._logger_fn(),
        counter=counter,
    )
